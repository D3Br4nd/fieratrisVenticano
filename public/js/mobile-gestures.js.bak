/**
 * FieraTris - Mobile Gesture Support
 * Questo file gestisce il supporto per le gesture su dispositivi mobili
 */

const setupMobileGestures = (touchZone, gestureIndicator, handleInput) => {
    // Controllo se è un dispositivo touch
    const isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints > 0;
    
    // Dettagli per il tracking delle gesture
    let touchStartX = 0;
    let touchStartY = 0;
    let touchTimeStart = 0;
    let lastTap = 0;
    let isActive = false;
    
    // Soglie per la sensibilità delle gesture
    const SWIPE_THRESHOLD = 50;
    const SWIPE_TIMEOUT = 300;
    const TAP_TIMEOUT = 200;
    const DOUBLE_TAP_DELAY = 300;
    
    // Feedback aptico (vibrazione)
    function vibrateIfPossible(duration) {
        if ('vibrate' in navigator) {
            try {
                navigator.vibrate(duration);
            } catch (e) {
                console.warn('Vibration API not supported', e);
            }
        }
    }
    
    // Aggiorna l'indicatore di gesto corrente
    function updateGestureIndicator(text) {
        if (gestureIndicator) {
            gestureIndicator.textContent = text;
        }
    }
    
    // Non fare nulla se non è un dispositivo touch
    if (!isTouchDevice || !touchZone) {
        console.log('Non è un dispositivo touch o manca la zona touch');
        return {
            isActive: false
        };
    }
    
    console.log('Inizializzazione supporto gesture mobili');
    
    // Gestore del touch start
    function handleTouchStart(e) {
        const touch = e.touches[0];
        touchStartX = touch.clientX;
        touchStartY = touch.clientY;
        touchTimeStart = Date.now();
        isActive = true;
        updateGestureIndicator('Tocco rilevato');
    }
    
    // Gestore del touch move (per lo swipe)
    function handleTouchMove(e) {
        if (!isActive) return;
        
        // NON preveniamo più lo scrolling di default su mobile
        // e.preventDefault(); -- RIMOSSO
        
        const touch = e.touches[0];
        const touchX = touch.clientX;
        const touchY = touch.clientY;
        
        const deltaX = touchX - touchStartX;
        const deltaY = touchY - touchStartY;
        
        // Aggiorna in tempo reale l'indicatore della direzione
        if (Math.abs(deltaX) > Math.abs(deltaY)) {
            if (deltaX > 0) {
                updateGestureIndicator('→ Destra');
            } else {
                updateGestureIndicator('← Sinistra');
            }
        } else {
            if (deltaY > 0) {
                updateGestureIndicator('↓ Giù');
            } else {
                updateGestureIndicator('↑ Rotazione');
            }
        }
    }
    
    // Gestore del touch end (determina quale azione eseguire)
    function handleTouchEnd(e) {
        if (!isActive) return;
        
        const touchEndTime = Date.now();
        const touchDuration = touchEndTime - touchTimeStart;
        
        // Se il tocco è stato veloce, controlla se è un tap o double tap
        if (touchDuration < TAP_TIMEOUT) {
            // Se è stato un doppio tap (tasto rapido)
            if (touchEndTime - lastTap < DOUBLE_TAP_DELAY) {
                // Evento di hard drop (double tap)
                handleInput('drop');
                vibrateIfPossible(50);
                updateGestureIndicator('↓↓ Hard Drop');
            } else {
                // Singolo tap (rotazione)
                handleInput('rotate');
                vibrateIfPossible(20);
                updateGestureIndicator('↻ Rotazione');
            }
            lastTap = touchEndTime;
        } else {
            // Altrimenti potrebbe essere uno swipe
            const touch = e.changedTouches[0];
            const touchEndX = touch.clientX;
            const touchEndY = touch.clientY;
            
            const deltaX = touchEndX - touchStartX;
            const deltaY = touchEndY - touchStartY;
            
            // Verifica se è uno swipe valido (veloce e abbastanza lungo)
            if (touchDuration < SWIPE_TIMEOUT) {
                if (Math.abs(deltaX) > SWIPE_THRESHOLD || Math.abs(deltaY) > SWIPE_THRESHOLD) {
                    // Determina la direzione dello swipe
                    if (Math.abs(deltaX) > Math.abs(deltaY)) {
                        // Swipe orizzontale
                        if (deltaX > 0) {
                            // Destra
                            handleInput('right');
                            vibrateIfPossible(15);
                            updateGestureIndicator('→ Destra');
                        } else {
                            // Sinistra
                            handleInput('left');
                            vibrateIfPossible(15);
                            updateGestureIndicator('← Sinistra');
                        }
                    } else {
                        // Swipe verticale
                        if (deltaY > 0) {
                            // Giù (soft drop)
                            handleInput('down');
                            vibrateIfPossible(15);
                            updateGestureIndicator('↓ Giù');
                        } else {
                            // Su (rotazione)
                            handleInput('rotate');
                            vibrateIfPossible(20);
                            updateGestureIndicator('↑ Rotazione');
                        }
                    }
                }
            }
        }
        
        // Resetta lo stato attivo
        isActive = false;
        
        // Ripristina l'indicatore di gesto dopo un breve ritardo
        setTimeout(() => {
            updateGestureIndicator('Tocca per controllare');
        }, 1000);
    }
    
    // Imposta i listener per gli eventi touch (con passive: true)
    touchZone.addEventListener('touchstart', handleTouchStart, { passive: true });
    touchZone.addEventListener('touchmove', handleTouchMove, { passive: true });
    touchZone.addEventListener('touchend', handleTouchEnd, { passive: true });
    
    // Inizializza l'indicatore
    updateGestureIndicator('Tocca per controllare');
    
    return {
        isActive: true,
        // Metodo per disattivare i controlli touch
        disable: () => {
            touchZone.removeEventListener('touchstart', handleTouchStart);
            touchZone.removeEventListener('touchmove', handleTouchMove);
            touchZone.removeEventListener('touchend', handleTouchEnd);
            updateGestureIndicator('Controlli disattivati');
            isActive = false;
        },
        // Metodo per riattivare i controlli touch
        enable: () => {
            touchZone.addEventListener('touchstart', handleTouchStart, { passive: true });
            touchZone.addEventListener('touchmove', handleTouchMove, { passive: true });
            touchZone.addEventListener('touchend', handleTouchEnd, { passive: true });
            updateGestureIndicator('Tocca per controllare');
            isActive = true;
        }
    };
};
